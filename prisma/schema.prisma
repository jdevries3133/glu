generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContactFormSubmission {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  name       String
  email      String?
  phone      String?
  subscribed Boolean  @default(true)
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  // google auth strings are quite long;
  // see https://developers.google.com/identity/protocols/oauth2#size
  access_token      String? @db.VarChar(2049)
  id_token          String? @db.VarChar(2049)
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --------------------- "Quick Game" data  -----------------------------------

/// Possibly anonymous, possible (in the future) related to a student account.
model GamePlayer {
  id       String     @id @default(cuid())
  name     String?
  GamePlay GamePlay[]
}

/// This is just a store of name permutations with no ownership
model PlayerNameChoice {
  id    String @id @default(cuid())
  value String @unique
}

enum GameType {
  GPT_GUESS
}

model GamePlay {
  id   String   @id @default(cuid())
  type GameType

  playerId          String
  player            GamePlayer          @relation(fields: [playerId], references: [id], onDelete: Cascade)
  GptGuessGameScore GptGuessGameScore?
  GptGuessGameGuess GptGuessGameGuess[]
}

// *** GPT Guess Game Data ***

model GptGuessGameScore {
  gameId String   @unique
  game   GamePlay @relation(fields: [gameId], references: [id], onDelete: Cascade)

  numGuesses          Int
  playDurationSeconds Int
}

model GptGuessGameGuess {
  id          String @id @default(cuid())
  playerGuess String
  gptGuess    String

  gameId String
  game   GamePlay @relation(fields: [gameId], references: [id], onDelete: Cascade)
}
